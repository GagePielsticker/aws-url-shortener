service: url-service

###################
# General Configuration
###################

plugins:
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-associate-waf

provider:

  ### Global environment Vars for lambdas
  environment:
    DYNAMO_TABLE_NAME: 'linkTable'
    LONG_INDEX: 'longlink'

    ### Give Lambda permission to dynamodb
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
      - !Sub arn:aws:dynamodb:*:${AWS::AccountId}:table/${self:provider.environment.DYNAMO_TABLE_NAME}
      - !Sub arn:aws:dynamodb:*:${AWS::AccountId}:table/${self:provider.environment.DYNAMO_TABLE_NAME}/index/${self:provider.environment.LONG_INDEX}

  ### General Deployment Settings
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  stackTags:
    project: ${self:service}
  tags:
    project: ${self:service}

  deploymentBucket:
    name: ${self:service}-${self:provider.stage}-deployment-641 ##MUST BE UNIQUE IN EACH REGION
    
  ### Lambda Settings
  runtime: nodejs18.x #node version
  memorySize: 512 # optional, in MB, default is 1024
  timeout: 20 # optional, in seconds, default is 6
  architecture: arm64 #architecture to run the lambda (graviton2)
  logRetentionInDays: 7 #time in days to keep lambda logs in cloudwatch
  tracing: # X-Ray tracing on lambda & apigateway
    lambda: true
    apiGateway: true

  ### API Gateway creation/Settings & usage plan
  endpointType: REGIONAL
  apiGateway:
    description: Api Gateway for ${self:service}-${self:provider.stage}

# attach waf to api gateway
custom:
  associateWaf:
    name: ${self:service}-${self:provider.stage}-WAF
    version: V2 #(optional) Regional | V2
  deploymentBucket:
    blockPublicAccess: true
    tags:
      - Key: project
        Value: ${self:service}


###################
# Lambda Functions to provision
###################
# Lambda Packaging Options
package:
  individually: true
  patterns:
    - '!**/*'
    - node_modules/**
    - src/utils/** #Global lambda utils
    - package.json

# Actual lambda functions
functions:
  shorten:
    handler: src/lambdas/shorten/handler.handler #fileName.exportName in code
    maximumRetryAttempts: 1 #Retry attempts by lambda on failure
    package: # Only package code relevant to this specific lambda
      patterns:
        - src/lambdas/shorten/**
    events: #API Gateway integration etc
      - http:
          method: post
          path: shorten
          private: true
          cors: #cors settings
            origin: '*'

  s:
    handler: src/lambdas/s/handler.handler #fileName.exportName in code
    maximumRetryAttempts: 1 #Retry attempts by lambda on failure
    package: # Only package code relevant to this specific lambda
      patterns:
        - src/lambdas/s/**
    events: #API Gateway integration etc
      - http:
          method: get
          path: s/{proxy+}
          cors: #cors settings
            origin: '*'
            
###################
# Additional Resource Provisioning
###################
resources:
  Resources:

    # DynamoDB for link data
    # Check out https://github.com/sbstjn/serverless-dynamodb-autoscaling for autoscaling the capacity units
    # Check out https://www.serverless.com/plugins/serverless-create-global-dynamodb-table/ for multi-region
    # We keep put our email as a secondary index so that we can preserve the ability to change it if the user wishes. 
    linkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMO_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: shortID
            AttributeType: S
          - AttributeName: longID
            AttributeType: S 
        KeySchema:
          - AttributeName: shortID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:  # Define the secondary index
          - IndexName: ${self:provider.environment.LONG_INDEX}
            KeySchema:
              - AttributeName: longID
                KeyType: HASH
            Projection:
              ProjectionType: ALL  # Change this to specify what attributes to include in the index
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          
    # WAF for our api gateway
    wafv2:
      Type: AWS::WAFv2::WebACL
      Properties:
        DefaultAction:
          Allow: {}
        Name: ${self:service}-${self:provider.stage}-WAF
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: False
          MetricName: ${self:service}-${self:provider.stage}
          SampledRequestsEnabled: False
        Tags:
          - Key: project
            Value: ${self:service}
        Rules: 
          - Name: Core-Rule-Set
            OverrideAction:
              None: {}
            Priority: 0
            VisibilityConfig:
              CloudWatchMetricsEnabled: False
              MetricName: ${self:service}-${self:provider.stage}-WAF
              SampledRequestsEnabled: False
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesCommonRuleSet
          - Name: Known-Bad-Input
            OverrideAction:
              None: {}
            Priority: 1
            VisibilityConfig:
              CloudWatchMetricsEnabled: False
              MetricName: ${self:service}-${self:provider.stage}-WAF
              SampledRequestsEnabled: False
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesKnownBadInputsRuleSet
          - Name: Anonymous-IP
            OverrideAction:
              None: {}
            Priority: 2
            VisibilityConfig:
              CloudWatchMetricsEnabled: False
              MetricName: ${self:service}-${self:provider.stage}-WAF
              SampledRequestsEnabled: False
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAnonymousIpList
          - Name: IP-Reputation
            OverrideAction:
              None: {}
            Priority: 3
            VisibilityConfig:
              CloudWatchMetricsEnabled: False
              MetricName: ${self:service}-${self:provider.stage}-WAF
              SampledRequestsEnabled: False
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAmazonIpReputationList